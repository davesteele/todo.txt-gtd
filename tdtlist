#!/usr/bin/python3

import argparse
import datetime
import os
import re
from typing import List

def is_task(line: str, *terms: List[str]) -> bool:
    if re.search("^\s*#", line):
        return False

    if re.search("^\s*$", line):
        return False

    if "@" not in line:
        return False

    if re.search("^x ", line):
        return False

    if threshold_mask(line):
        return False

    if "@~" in line:
        return False

    if not terms:
        return True

    for term in terms:
        if term not in line:
            return False

    return True


def task_priority(task: str) -> str:
    match = re.search( "^\((.)\) ", task)
    if match:
        return match.group(1)

    return "M"


def task_sort(tasks: List[str]) -> List[str]:
    pri_tagged_tasks = [(task_priority(txt), n, txt) for (n, txt) in enumerate(tasks)]

    return [x[2] for x in sorted(pri_tagged_tasks)]


def threshold_mask(task: str) -> bool:
    match = re.search("t:(\d\d\d\d-\d\d-\d\d)", task)

    if not match:
        return False

    threshold_date = datetime.datetime.strptime(match.group(1), "%Y-%m-%d")

    return datetime.datetime.now() < threshold_date


def parse_args():
    parser = argparse.ArgumentParser(
        description="List the tasks in todo.txt, by @category"
        )

    parser.add_argument(
        "-f", "--file",
        help="the todo.txt file location "
             "(defaults to ~/Dropbox/todo/todo.txt)",
        default=os.path.expanduser("~/Dropbox/todo/todo.txt")
    )

    parser.add_argument(
        "terms",
        nargs="*",
        metavar="TERM",
        help="search terms to filter the reported tasks",
    )

    args = parser.parse_args()

    return args


def main():
    args = parse_args()

    todotxt = open(args.file, 'r').read()
    tasks = task_sort([x for x in todotxt.splitlines() if is_task(x, *args.terms)])
    contexts = sorted({y for x in tasks for y in x.split() if y[0] == "@"})

    for context in contexts:
        print(context)
        print()
        for task in tasks:
            if [x for x in task.split() if x == context]:
                print(task)
        print()


if __name__ == '__main__':
    main()
