#!/usr/bin/python3

import re
import os
import argparse

def TaskProj(line):
    match = re.search(" \+([^ ]+)", line)

    if match:
        return match.group(1)
    else:
        return None


def LineGen(todotxt):
    current_project = None

    deferredTasks = []

    for line in todotxt.split('\n'):

        match = re.search("^# ([^ ]+)$", line)
        if match:
            current_project = match.group(1)

        taskProj = TaskProj(line)
        if taskProj:
            if current_project and (current_project != taskProj):
                deferredTasks.append(line)
            else:
                yield (taskProj, line)
        else:
            if current_project:
                yield (current_project, line)
            else:
                deferredTasks.append(line)

    for line in deferredTasks:
        yield(TaskProj(line), line)


class Projects(object):
    def __init__(self):
        self.proj_list = { "_None": Project("_None") }

    def GetProject(self, name):
        pname = name
        if not pname:
            pname = "_None"

        if pname not in self.proj_list:
            project = Project(pname)
            self.proj_list[pname] = project

        return self.proj_list[pname]

    def Dump(self):
        output = ""
        for name, proj in sorted(self.proj_list.items(), key=lambda x: x[0].upper()):
            output += proj.Dump() + "\n"

        return output[:-1]


class Project(object):
    def __init__(self, name):
        self.name = name
        self.tasks = []

    def AddTask(self, text):
        if not self.tasks and (not text or text[0] != "#"):
            self.AddTask("# {}".format(self.name))
            self.AddTask("#")
            self.AddTask("")

        self.tasks.append(Task(text, self.name))

    def Dump(self):

        if not self.tasks or self.tasks[-1].text:
            self.AddTask("")

        return "\n".join([x.text for x in self.tasks])


class Task(object):
    def __init__(self, text, project):
        self.project = project
        self.text = self.FixTask(text, project)

    def GetContext(self, text):
        match = re.search(" @([^ ]+)", text)
        if match:
            return match.group(1)
        else:
            return None

    def GetProject(self, text):
        match = re.search(" \+([^ ]+)", text)
        if match:
            return match.group(1)
        else:
            return None

    def FixTask(self, text, proj_name):
        context = self.GetContext(text)
        project = self.GetProject(text)

        if context and not project and self.project != "_None":
            if proj_name:
                text = text + " +" + proj_name

        return text


def parse_args():
    parser = argparse.ArgumentParser(
        description="Clean up the todo.txt file in a GTD fashion"
        )

    parser.add_argument(
        "-f", "--file",
        help="the todo.txt file location (defaults to ~/Dropbox/todo/todo.txt)",
        default=os.path.expanduser("~/Dropbox/todo/todo.txt")
    )

    args = parser.parse_args()

    return args


def main():

    args = parse_args()

    projects = Projects()

    with open(args.file, 'r') as fp:
        todotxt = fp.read()

    for proj_name, task_text in LineGen(todotxt):
        projects.GetProject(proj_name).AddTask(task_text)

    with open(args.file, 'w') as fp:
        fp.write(projects.Dump())


if __name__ == '__main__':
    main()
