#!/usr/bin/python3

import re
import os
import argparse
from functools import wraps

NONE_PROJ = "_None"


def none_on_exception(*exceptions):
    def _none_on_exception(fp):
        @wraps(fp)
        def wrapper(*args, **kwargs):
            try:
                return fp(*args, **kwargs)
            except exceptions:
                return None

        return wrapper

    return _none_on_exception


@none_on_exception(AttributeError)
def TaskProj(line):
    return re.search(" \+([^ ]+)", line).group(1)


def LineGen(todotxt):
    current_project = None

    deferredTasks = []

    for line in todotxt.split('\n'):

        match = re.search("^# ([^ ]+)$", line)
        if match:
            current_project = match.group(1)

        taskProj = TaskProj(line)
        if taskProj:
            if current_project and (current_project != taskProj):
                deferredTasks.append(line)
            else:
                yield (taskProj, line)
        else:
            if current_project:
                yield (current_project, line)
            else:
                deferredTasks.append(line)

    for line in deferredTasks:
        yield(TaskProj(line), line)


class Projects(dict):
    def __init__(self, *args, **kwargs):
        super(Projects, self).__init__(*args, **kwargs)
        self[NONE_PROJ]

    def __missing__(self, key):
        if key is None:
            proj = self[NONE_PROJ]
        else:
            proj = Project(key)
            self[key] = proj
        return proj

    def __repr__(self):
        projs = sorted([self[x] for x in self], key=lambda y: y.name.upper())
        return "\n".join([str(x) for x in projs])


class Project(object):
    def __init__(self, name):
        self.name = name
        self.tasks = []

    def AddTask(self, text):
        if not self.tasks and (not text or text[0] != "#"):
            self.AddTask("# {}".format(self.name))
            self.AddTask("#")
            self.AddTask("")

        self.tasks.append(Task(text, self.name))

    def __repr__(self):
        if not self.tasks or self.tasks[-1].text:
            self.AddTask("")

        return "\n".join([x.text for x in self.tasks])


class Task(object):
    def __init__(self, text, project):
        self.project = project
        self.text = self.FixTask(text)

    @none_on_exception(AttributeError)
    def GetContext(self, text):
        return re.search(" @([^ ]+)", text).group(1)

    @none_on_exception(AttributeError)
    def GetProject(self, text):
        return re.search(" \+([^ ]+)", text).group(1)

    def FixTask(self, text):
        context = self.GetContext(text)
        taskProj = self.GetProject(text)

        if context is not None \
           and taskProj is None \
           and self.project != NONE_PROJ \
           and self.project is not None:

            text = "{0} +{1}".format(text, self.project)

        return text


def parse_args():
    parser = argparse.ArgumentParser(
        description="Clean up the todo.txt file in a GTD fashion"
        )

    parser.add_argument(
        "-f", "--file",
        help="the todo.txt file location "
             "(defaults to ~/Dropbox/todo/todo.txt)",
        default=os.path.expanduser("~/Dropbox/todo/todo.txt")
    )

    args = parser.parse_args()

    return args


def main():
    args = parse_args()

    projects = Projects()

    with open(args.file, 'r') as fp:
        for proj_name, task_text in LineGen(fp.read()):
            projects[proj_name].AddTask(task_text)

    with open(args.file, 'w') as fp:
        fp.write(str(projects))


if __name__ == '__main__':
    main()
